### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Comment {
  author: User!
  content: String!
  createdAt: String!
  id: Int!
  parentComment: ID
  post: Post!
  postId: String!
  updatedAt: String
  votes: Int!
}

type Error {
  field: String
  message: String!
}

type Mutation {
  createPost(content: String, title: String!, userId: String!): Post!
  deleteUser(email: String!): UserResponse
  forgotPassword(email: String!): Boolean!
  login(email: String!, password: String!): UserResponse
  logout: Boolean!
  postComment(content: String!, parentComment: Int, postId: String!, userId: String!): Comment
  registerUser(avatar: String, bio: String, coverImage: String, email: String!, password: String!, username: String!): UserResponse!
  resetPassword(password: String!, token: String!): UserResponse!
  updatePassword(email: String!, oldPassword: String!, password: String!): UserResponse!
  updateUser(avatar: String!, bio: String, coverImage: String!, email: String!, name: String): User!
  voteComment(id: Int!, vote: voteOrder): Comment!
  votePost(postId: String!, vote: voteOrder): Post!
}

type Post {
  author: User!
  comments: [Comment]
  content: String!
  createdAt: String!
  id: String!
  title: String!
  updatedAt: String
  votes: Int!
}

type Query {
  feed(cursor: String, take: Int! = 15): [Post]
  me: User
  post(id: String!): Post
  postComments(id: String!): [Comment]
  replies(commentId: Int!): [Comment]
  user(email: String!): User
  users: [User]
}

type User {
  avatar: String
  bio: String
  comments: [Comment]
  coverImage: String
  createdAt: String!
  email: String!
  id: String!
  name: String!
  posts: [Post]
  updatedAt: String
}

type UserResponse {
  errors: [Error]
  user: User
}

enum voteOrder {
  add
  delete
}